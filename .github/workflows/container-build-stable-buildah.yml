name: "[CI] Upstream latest - Buildah method Github Runner"

on:
  workflow_dispatch:
  push:
    paths:
      - 'Containerfile'
      - 'Containerfile.armv6'
      - '.github/workflows/container-build-stable-buildah.yml'
  schedule:
    - cron: '42 2 * * 6'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINERFILE_SUFFIX: ""

concurrency:
  group: '${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
    steps:
    - name: Update podman to 5.x
      if: runner.os == 'Linux'
      shell: bash
      run: |
        ubuntu_version='${{ inputs.ubuntu-version }}'
        echo "INFO: Using Ubuntu version '${ubuntu_version}' for Kubic repository."

        echo "INFO: Adding Kubic repository..."
        sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
        curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubic.gpg

        echo "INFO: Updating package list..."
        sudo apt-get update -qq

        echo "INFO: Installing CRIU dependencies..."
        sudo apt-get install --allow-unauthenticated -qq -y libprotobuf32t64 python3-protobuf libnet1

        echo "INFO: Installing CRIU manually..."
        curl -sLO http://archive.ubuntu.com/ubuntu/pool/universe/c/criu/criu_3.16.1-2_amd64.deb && sudo dpkg -i criu_3.16.1-2_amd64.deb

        echo "INFO: Installing Podman..."
        sudo apt-get -qq -y install --allow-unauthenticated podman buildah || {
          echo "WARN: Primary installation failed. Trying fallback repository..."
          sudo sh -c "echo 'deb http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
          curl -fsSL "http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubic-fallback.gpg
          sudo apt-get --allow-insecure-repositories update -qq
          sudo apt-get --allow-unauthenticated -y install podman buildah
        }

        sudo usermod --add-subuids 524288-589823 --add-subgids 524288-589823 $(id -nu)

        echo "INFO: Podman installation complete."
        podman version

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true

    - name: Tar as root
      run: |
        sudo mv -fv /usr/bin/tar /usr/bin/tar.orig
        echo -e '#!/bin/sh\n\nsudo /usr/bin/tar.orig "$@"' | sudo tee -a /usr/bin/tar
        sudo chmod +x /usr/bin/tar

    - name: cache podman storage
      uses: actions/cache@v3
      with:
        path: ~/.local/share/containers/storage
        key: podman-storage-${{ matrix.platform }}

    - name: set upstream version
      run: |
        echo "UPSTREAM_BRANCH=$(curl -sSL https://api.github.com/repos/ancwrd1/snx-rs/releases/latest | grep tag_name | cut -d "\"" -f 4 | cut -d "v" -f2)" >>${GITHUB_ENV}

    - name: set lower case image_name
      run: |
        echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ env.IMAGE_NAME }}'

    - name: Prepare armv6
      shell: bash
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
        if [[ ${platform} == "linux/arm/v6" ]]; then echo "CONTAINERFILE_SUFFIX=.armv6" >> $GITHUB_ENV ; fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: export architecture name (removing os prefix)
      run: |
        echo "PODMAN_ARCH=${PLATFORM#*/}" >>${GITHUB_ENV}
      env:
        PLATFORM: ${{ matrix.platform }}

    - name: Container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
        tags: |
          type=raw,value=build
        flavor: |
          suffix=-${{ env.PODMAN_ARCH }}

    - name: Build Image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ steps.meta.outputs.images }}
        build-args: snx_rs_version=${{env.UPSTREAM_BRANCH}}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        oci: true
        containerfiles: |
          ./Containerfile${{ env.CONTAINERFILE_SUFFIX }}
        platforms: ${{ matrix.platform }}

    - name: Container to tar
      # https://github.com/actions/runner-images/issues/10443#issuecomment-2296608244
      run: podman save -o /tmp/${{ env.PLATFORM_PAIR }}-oci.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ env.PLATFORM_PAIR }}
        path: /tmp/${{ env.PLATFORM_PAIR }}-oci.tar
        if-no-files-found: error
        retention-days: 1

  upload:
    name: Upload images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build
    steps:
    - name: Update podman to 5.x
      if: runner.os == 'Linux'
      shell: bash
      run: |
        ubuntu_version='${{ inputs.ubuntu-version }}'
        echo "INFO: Using Ubuntu version '${ubuntu_version}' for Kubic repository."

        echo "INFO: Adding Kubic repository..."
        sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
        curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubic.gpg

        echo "INFO: Updating package list..."
        sudo apt-get update -qq

        echo "INFO: Installing CRIU dependencies..."
        sudo apt-get install --allow-unauthenticated -qq -y libprotobuf32t64 python3-protobuf libnet1

        echo "INFO: Installing CRIU manually..."
        curl -sLO http://archive.ubuntu.com/ubuntu/pool/universe/c/criu/criu_3.16.1-2_amd64.deb && sudo dpkg -i criu_3.16.1-2_amd64.deb

        echo "INFO: Installing Podman..."
        sudo apt-get -qq -y install --allow-unauthenticated podman || {
          echo "WARN: Primary installation failed. Trying fallback repository..."
          sudo sh -c "echo 'deb http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
          curl -fsSL "http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubic-fallback.gpg
          sudo apt-get --allow-insecure-repositories update -qq
          sudo apt-get --allow-unauthenticated -y install podman
        }

        sudo usermod --add-subuids 524288-589823 --add-subgids 524288-589823 $(id -nu)

        echo "INFO: Podman installation complete."
        podman version

    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: /tmp
        pattern: build-*
        merge-multiple: true

    - name: set lower case image_name
      run: |
        echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ env.IMAGE_NAME }}'

    - run: podman manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:manifest
    - run: |
        for container in /tmp/*.tar; do podman manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:manifest oci-archive:${container}; done

    - name: Container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ env.UPSTREAM_BRANCH }}

    - name: add tags
      run: |
        # fix multi-line issue from steps.meta.outputs.tags
        podman tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:manifest $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')

    - name: Push image to GHCR
      uses: redhat-actions/push-to-registry@v2
      id: push
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
        tags: ${{ steps.meta.outputs.tags }}
        username: ${{ github.actor }}
        password: ${{ github.token }}
        registry: ${{ env.REGISTRY }}

    - name: Print image url
      run: echo "Image pushed to ${{ steps.push.outputs.registry-paths }}"

